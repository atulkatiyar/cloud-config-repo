package com.lseg.ipps.solutions.shared.service;

import com.lseg.ipps.solutions.shared.model.CacheEntry;
import com.lseg.ipps.solutions.shared.request.ConfigurationParameterResponse;
import com.lseg.ipps.solutions.shared.service.cache.CacheEntryManager;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.jupiter.MockitoExtension;
import software.amazon.awssdk.services.ssm.SsmClient;
import software.amazon.awssdk.services.ssm.model.GetParametersByPathRequest;
import software.amazon.awssdk.services.ssm.model.GetParametersByPathResponse;
import software.amazon.awssdk.services.ssm.model.Parameter;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class ConfigurationServiceTest {

    @Mock
    private CacheEntryManager cacheEntryManager;

    @Mock
    private SsmClient ssmClient;

    private ConfigurationService configurationService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        configurationService = new ConfigurationService(cacheEntryManager);
    }

    @Test
    void testFetchAndPersistUpdatedLogLevel_Success() {
        // Setup test data
        String rootJson = "{\"packageName\":\"ROOT\",\"logLevel\":\"INFO\",\"version\":\"1\",\"expiryTimestamp\":\""
                + LocalDateTime.now().minusDays(1).atZone(ZoneId.of("UTC")).toInstant().getEpochSecond() + "\"}";
        String appJson = "{\"packageName\":\"com.lseg\",\"logLevel\":\"DEBUG\",\"version\":\"1\",\"expiryTimestamp\":\""
                + LocalDateTime.now().minusDays(1).atZone(ZoneId.of("UTC")).toInstant().getEpochSecond() + "\"}";

        // Mock SSM response
        Parameter rootParameter = Parameter.builder().value(rootJson).build();
        Parameter appParameter = Parameter.builder().value(appJson).build();
        
        GetParametersByPathResponse ssmResponse = GetParametersByPathResponse.builder()
                .parameters(Arrays.asList(rootParameter, appParameter))
                .nextToken(null)
                .build();

        try (var mockedStatic = mockStatic(SsmClient.class)) {
            mockedStatic.when(() -> SsmClient.builder())
                    .thenReturn(SsmClient.builder().region(software.amazon.awssdk.regions.Region.EU_WEST_1));
            
            when(ssmClient.getParametersByPath(any(GetParametersByPathRequest.class)))
                    .thenReturn(ssmResponse);

            String result = configurationService.fetchAndPersistUpdatedLogLevel();

            assertEquals("success", result);
            verify(cacheEntryManager).saveEntry(any(CacheEntry.class));
        }
    }

    @Test
    void testFetchAndPersistUpdatedLogLevel_Exception() {
        try (var mockedStatic = mockStatic(SsmClient.class)) {
            mockedStatic.when(() -> SsmClient.builder())
                    .thenReturn(SsmClient.builder().region(software.amazon.awssdk.regions.Region.EU_WEST_1));
            
            when(ssmClient.getParametersByPath(any(GetParametersByPathRequest.class)))
                    .thenThrow(new RuntimeException("AWS Error"));

            String result = configurationService.fetchAndPersistUpdatedLogLevel();
            
            assertEquals("failed", result);
            verify(cacheEntryManager, never()).saveEntry(any());
        }
    }

    @Test
    void testIsParameterExpired_ExpiredParameter() {
        long expiredTimestamp = LocalDateTime.now().minusDays(1)
                .atZone(ZoneId.of("UTC")).toInstant().getEpochSecond();
        
        boolean result = configurationService.isParameterExpired(String.valueOf(expiredTimestamp));
        assertTrue(result, "Parameter should be expired");
    }

    @Test
    void testIsParameterExpired_ValidParameter() {
        long validTimestamp = LocalDateTime.now().plusDays(1)
                .atZone(ZoneId.of("UTC")).toInstant().getEpochSecond();
        
        boolean result = configurationService.isParameterExpired(String.valueOf(validTimestamp));
        assertFalse(result, "Parameter should not be expired");
    }

    @Test
    void testIsParameterExpired_InvalidFormat() {
        assertThrows(IllegalArgumentException.class,
                () -> configurationService.isParameterExpired("invalid-timestamp"),
                "Should throw IllegalArgumentException for invalid timestamp format");
    }

    @Test
    void testFetchAndPersistUpdatedLogLevel_WithPagination() {
        // Setup test data with pagination
        String rootJson = "{\"packageName\":\"ROOT\",\"logLevel\":\"INFO\",\"version\":\"1\",\"expiryTimestamp\":\""
                + LocalDateTime.now().minusDays(1).atZone(ZoneId.of("UTC")).toInstant().getEpochSecond() + "\"}";
        String appJson = "{\"packageName\":\"com.lseg\",\"logLevel\":\"DEBUG\",\"version\":\"1\",\"expiryTimestamp\":\""
                + LocalDateTime.now().minusDays(1).atZone(ZoneId.of("UTC")).toInstant().getEpochSecond() + "\"}";

        // Create two pages of responses
        GetParametersByPathResponse firstPage = GetParametersByPathResponse.builder()
                .parameters(List.of(Parameter.builder().value(rootJson).build()))
                .nextToken("token")
                .build();
        
        GetParametersByPathResponse secondPage = GetParametersByPathResponse.builder()
                .parameters(List.of(Parameter.builder().value(appJson).build()))
                .nextToken(null)
                .build();

        try (var mockedStatic = mockStatic(SsmClient.class)) {
            mockedStatic.when(() -> SsmClient.builder())
                    .thenReturn(SsmClient.builder().region(software.amazon.awssdk.regions.Region.EU_WEST_1));
            
            when(ssmClient.getParametersByPath(any(GetParametersByPathRequest.class)))
                    .thenReturn(firstPage)
                    .thenReturn(secondPage);

            String result = configurationService.fetchAndPersistUpdatedLogLevel();

            assertEquals("success", result);
            verify(cacheEntryManager).saveEntry(any(CacheEntry.class));
        }
    }

    @Test
    void testFetchAndPersistUpdatedLogLevel_NoRootLevel() {
        // Setup test data without ROOT level
        String appJson = "{\"packageName\":\"com.lseg\",\"logLevel\":\"DEBUG\",\"version\":\"1\",\"expiryTimestamp\":\""
                + LocalDateTime.now().minusDays(1).atZone(ZoneId.of("UTC")).toInstant().getEpochSecond() + "\"}";

        GetParametersByPathResponse response = GetParametersByPathResponse.builder()
                .parameters(List.of(Parameter.builder().value(appJson).build()))
                .nextToken(null)
                .build();

        try (var mockedStatic = mockStatic(SsmClient.class)) {
            mockedStatic.when(() -> SsmClient.builder())
                    .thenReturn(SsmClient.builder().region(software.amazon.awssdk.regions.Region.EU_WEST_1));
            
            when(ssmClient.getParametersByPath(any(GetParametersByPathRequest.class)))
                    .thenReturn(response);

            String result = configurationService.fetchAndPersistUpdatedLogLevel();

            assertEquals("success", result);
            
            ArgumentCaptor<CacheEntry> cacheEntryCaptor = ArgumentCaptor.forClass(CacheEntry.class);
            verify(cacheEntryManager).saveEntry(cacheEntryCaptor.capture());
            
            CacheEntry capturedEntry = cacheEntryCaptor.getValue();
            @SuppressWarnings("unchecked")
            Map<String, ConfigurationParameterResponse> data = (Map<String, ConfigurationParameterResponse>) capturedEntry.getValue();
            
            assertTrue(data.containsKey(ConfigurationService.ROOT_LEVEL_KEY));
            assertTrue(data.containsKey("com.lseg"));
        }
    }
}
