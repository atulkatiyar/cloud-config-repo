<dependencies>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-core</artifactId>
        <version>2.15.2</version>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.15.2</version>
    </dependency>
</dependencies>



variables:
  AWS_REGION: "eu-west-1"
  PARAMETER_PATH: "/log-config"
  ENVIRONMENT_NAME:
    value: "---"
    options:
      - "dev2"
      - "nfr"
      - "uat"
      - "Prod"
      - "---"
    description: "select the target environment"
  PACKAGE_NAME:
    value: ""
    description: "Enter the Package name."
  LOG_LEVEL:
    value: ""
    description: "Enter Logging level for package name"
  EXPIRY_TIME:
    value: ""
    description: "Enter the expiry time to reset the logging level(seconds)"
  WEBHOOK_URL: "http://100.99.124.149:8086/refresh-log-level"

workflow:
   rules:
     - if: $ENVIRONMENT_NAME =~ /^nfr.*/
       variables:
         RUNNER_TAG: "psl-epam-runner-qa"
         TARGET_AWS_ACCOUNT: "332028679471"
         AWS_ACCOUNT_NAME: "qa"
     - if: $ENVIRONMENT_NAME =~ /^uat.*/
       variables:
         RUNNER_TAG: "psl-epam-runner-uat"
         TARGET_AWS_ACCOUNT: "851725348656"
         AWS_ACCOUNT_NAME: "uat"
     - if: $ENVIRONMENT_NAME =~ /^prod.*/
       variables:
         RUNNER_TAG: "psl-epam-runner-prod"
         TARGET_AWS_ACCOUNT: "730335637172"
         AWS_ACCOUNT_NAME: "prod"
     - if: $ENVIRONMENT_NAME =~ /^dev2.*/
       variables:
         RUNNER_TAG: "psl-epam-runner"
         TARGET_AWS_ACCOUNT: "729500479720"
         AWS_ACCOUNT_NAME: "dev"
     - when: always

include:  
  - project: 'ci/stable/security/vault/vault-integrator'
    ref: '4.1.0'
    file:
      - 'templates/vault-integrator.yml'

stages:
  - authenticate
  - store-log-config
  - notify-app

.prepare:
   before_script:
    - |
      echo "Account = $AWS_ACCOUNT_NAME | Account ID = $TARGET_AWS_ACCOUNT"

auth:
  stage: authenticate
  extends: [.vault-aws-auth]
  variables:
    LSEG_PPE_VAULT: "true"  
    AWS_ACCOUNT: "$TARGET_AWS_ACCOUNT"    
  tags: ["LSEG"]
  rules:
    - if: $ENVIRONMENT_NAME != "---" &&  $ENVIRONMENT_NAME =~ /^(dev2|nfr|uat|prod)$/

store_log_config:
  needs:
    - auth
  tags: ["$RUNNER_TAG"]
  stage: store-log-config
  image: registry.dx1.lseg.com/app/app-50339/iac-temp/psl-base-docker-image/psl/awscli-docker:latest
  variables:
    PACKAGE_NAME:
      value: "root"
    LOG_LEVEL:
      value: "WARN"
    EXPIRY_TIME:
      value: "3600000"
  script:
    - |
      echo "Starting log configuration update process..."
      
      # Validate input parameters
      if [[ -z "$PACKAGE_NAME" || -z "$LOG_LEVEL" || -z "$EXPIRY_TIME" ]]; then
        echo "❌ ERROR: Required variables are missing! Please provide PACKAGE_NAME, LOG_LEVEL, and EXPIRY_TIME."
        exit 1
      fi
      
      # Calculate timestamps
      CURRENT_TIME=$(TZ=GMT date +%s)
      EXPIRY_TIMESTAMP=$(($CURRENT_TIME + ($EXPIRY_TIME)))
      
      # Create JSON payload
      PARAMETER_VALUE="{\"packageName\":\"$PACKAGE_NAME\",\"logLevel\":\"$LOG_LEVEL\",\"version\":\"1\",\"expiryTimestamp\":\"$EXPIRY_TIMESTAMP\"}"
      
      echo "Preparing to update parameter: $PARAMETER_PATH/$PACKAGE_NAME"
      echo "Parameter value: $PARAMETER_VALUE"
      
      # Check if parameter exists
      if aws ssm get-parameter --name "$PARAMETER_PATH/$PACKAGE_NAME" --region "$AWS_REGION" 2>/dev/null; then
        echo "Existing parameter found. Proceeding with update..."
      else
        echo "Parameter doesn't exist. Creating new parameter..."
      fi
      
      # Update or create parameter
      if aws ssm put-parameter \
          --name "$PARAMETER_PATH/$PACKAGE_NAME" \
          --value "$PARAMETER_VALUE" \
          --type "SecureString" \
          --overwrite \
          --region "$AWS_REGION"; then
        echo "✅ Log configuration successfully updated in Parameter Store!"
        
        # Verify the update
        echo "Verifying parameter update..."
        STORED_PARAM=$(aws ssm get-parameter \
          --name "$PARAMETER_PATH/$PACKAGE_NAME" \
          --with-decryption \
          --region "$AWS_REGION" \
          --query "Parameter.Value" \
          --output text)
        
        if [[ "$STORED_PARAM" == "$PARAMETER_VALUE" ]]; then
          echo "✅ Parameter verification successful!"
        else
          echo "❌ WARNING: Parameter verification failed. Stored value might be different from intended value."
          exit 1
        fi
      else
        echo "❌ ERROR: Failed to update parameter in AWS Parameter Store"
        exit 1
      fi

notify-app:
  stage: notify-app
  script:
    - |
      echo "Triggering webhook to refresh log level..."
      MAX_RETRIES=3
      RETRY_COUNT=0
      SUCCESS=false
      
      while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = false ]; do
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
          --connect-timeout 10 \
          --max-time 30 \
          -X POST "$WEBHOOK_URL" || echo "000")
        
        if [ "$RESPONSE" = "200" ]; then
          echo "✅ Webhook successfully triggered!"
          SUCCESS=true
        elif [ "$RESPONSE" = "000" ]; then
          echo "Curl command failed, attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
          RETRY_COUNT=$((RETRY_COUNT + 1))
          [ $RETRY_COUNT -lt $MAX_RETRIES ] && sleep 5
        else
          echo "❌ Webhook failed with response code $RESPONSE"
          exit 1
        fi
      done
      
      if [ "$SUCCESS" = false ]; then
        echo "❌ Failed to trigger webhook after $MAX_RETRIES attempts"
        exit 1
      fi
  only:
    - feature/FRPS-19759
