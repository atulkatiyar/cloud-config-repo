stages:
  - backup
  - share
  - copy
  - restore

backup_aurora:
  stage: backup
  script:
    - export SNAPSHOT_ID="aurora-cluster-snapshot-$(date +%Y%m%d%H%M%S)"
    - aws configure set aws_access_key_id $AWS_SOURCE_ACCESS_KEY
    - aws configure set aws_secret_access_key $AWS_SOURCE_SECRET_KEY
    - aws rds create-db-cluster-snapshot --db-cluster-snapshot-identifier $SNAPSHOT_ID --db-cluster-identifier my-aurora-cluster
  only:
    - main

share_snapshot:
  stage: share
  script:
    - export SNAPSHOT_ID="aurora-cluster-snapshot-$(date +%Y%m%d%H%M%S)"
    - aws rds modify-db-cluster-snapshot-attribute --db-cluster-snapshot-identifier $SNAPSHOT_ID --attribute-name restore --values-to-add $TARGET_AWS_ACCOUNT_ID
  only:
    - main

copy_snapshot:
  stage: copy
  script:
    - export SNAPSHOT_ID="aurora-cluster-snapshot-$(date +%Y%m%d%H%M%S)"
    - export TARGET_SNAPSHOT_ID="copied-aurora-cluster-snapshot"
    - aws configure set aws_access_key_id $AWS_TARGET_ACCESS_KEY
    - aws configure set aws_secret_access_key $AWS_TARGET_SECRET_KEY
    - aws rds copy-db-cluster-snapshot --source-db-cluster-snapshot-identifier arn:aws:rds:$AWS_REGION:$SOURCE_AWS_ACCOUNT_ID:cluster-snapshot:$SNAPSHOT_ID --target-db-cluster-snapshot-identifier $TARGET_SNAPSHOT_ID --kms-key-id arn:aws:kms:$AWS_REGION:$TARGET_AWS_ACCOUNT_ID:key/$TARGET_KMS_KEY_ID
  only:
    - main

restore_aurora:
  stage: restore
  script:
    - aws configure set aws_access_key_id $AWS_TARGET_ACCESS_KEY
    - aws configure set aws_secret_access_key $AWS_TARGET_SECRET_KEY
    - aws rds restore-db-cluster-from-snapshot --db-cluster-identifier restored-aurora-cluster --snapshot-identifier copied-aurora-cluster-snapshot --engine aurora-mysql
  only:
    - main



# Dynamic Generate The Docker Image Build Summary File      
echo "Microservice Docker Images Build Summary" >> build_images.txt
echo "" >> build_images.txt
echo "+------------------ + --------------------------+" >> build_images.txt   
echo "| Microservice      | Docker Image Tag          |" >> build_images.txt
echo "+-------------------+ --------------------------+" >> build_images.txt

echo "generating dynamic pipeline for blackduck docker image scan"
# Start creating the pipeline configuration
cat <<EOF > "blackduck-image-scan-pipeline.yml"

include:
  - project: 'ci/stable/security/blackduck-sca-container-scanning-only'
    ref: '0.0.16' # Make sure to use latest tag
    file:
      - 'templates/scan-container-image.yml' 

stages:
  - Container-security-scan 
EOF

cat blackduck-image-scan-pipeline.yml

# Enhanced find command to catch all relevant jar files
for jar_path in $(find . -type f \( \
    -name '*sboot*.jar' -o \
    -name 'api-mock-service*.jar' -o \
    -name 'log-level-agent*.jar' -o \
    -name 'log-level-controller*.jar' \
    \) -not -name '*original.jar'); do
    
    # Extract app name based on path pattern
    if [[ "$jar_path" == *"api-mock-service"* ]]; then
        app_name="wiremock-app"
    elif [[ "$jar_path" == *"log-level-agent"* ]]; then
        app_name="log-level-agent"
    elif [[ "$jar_path" == *"log-level-controller"* ]]; then
        app_name="log-level-controller"
    else
        # Extract the app name from the path for sboot jars
        app_name=$(basename $(dirname $(dirname $(dirname "$jar_path"))))
    fi
    
    MICROSERVICE=$app_name

    # Rest of your existing script continues here...
    [Previous script content from the setting up variables onwards...]

done

# printing the docker image build summary
echo "+-------------------+ ------------------------------------+" >> build_images.txt
cat build_images.txt

mv blackduck-image-scan-pipeline.yml ${CI_PROJECT_DIR}/
