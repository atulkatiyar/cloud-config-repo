java.lang.IllegalArgumentException: Invalid character found in method name [0x160x030x030x010xbf0x010x000x010xbb0x030x030x1a1/0xed.0x1c90xed*0xd20xa60xab0x12U0xedQ0x8e0xe1$0xc70x98+d0x0c=H0x920xfbjl0xf50xd8 ]. HTTP method names must be tokens



package com.lseg.ipps.solutions.shared.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsCredentials;
import software.amazon.awssdk.auth.credentials.AwsCredentialsProvider;
import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.ssm.SsmClient;
import software.amazon.awssdk.services.sts.StsClient;
import software.amazon.awssdk.services.sts.model.GetCallerIdentityRequest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Configuration
public class AwsTokenRenewalConfig {

    private static final Logger log = LoggerFactory.getLogger(AwsTokenRenewalConfig.class);

    @Value("${aws.region:eu-west-1}")
    private String region;

    @Value("${aws.profile.name:saml}")
    private String profileName;

    @Value("${aws.token.renewal.script.path:classpath:scripts/token_creation.py}")
    private String tokenScriptPath;

    @Value("${aws.token.check.interval:300}") // Check every 5 minutes by default
    private long tokenCheckIntervalSeconds;

    @Value("${aws.use.token.renewal:false}")
    private boolean useTokenRenewal;

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    @Bean
    @ConditionalOnProperty(name = "aws.use.token.renewal", havingValue = "true")
    public AutoRenewingCredentialsProvider autoRenewingCredentialsProvider() {
        log.info("Setting up auto-renewing credentials provider");
        AutoRenewingCredentialsProvider provider = new AutoRenewingCredentialsProvider(
                profileName, tokenScriptPath);

        // Schedule periodic token validation and renewal
        scheduler.scheduleAtFixedRate(
                provider::checkAndRenewTokenIfNeeded,
                0,
                tokenCheckIntervalSeconds,
                TimeUnit.SECONDS);

        return provider;
    }

    @Bean
    @ConditionalOnProperty(name = "aws.use.token.renewal", havingValue = "true")
    public SsmClient tokenRenewalSsmClient(AutoRenewingCredentialsProvider credentialsProvider) {
        return SsmClient.builder()
                .region(Region.of(region))
                .credentialsProvider(credentialsProvider)
                .build();
    }

    @Bean
    @ConditionalOnProperty(name = "aws.use.token.renewal", havingValue = "false", matchIfMissing = true)
    public SsmClient standardSsmClient() {
        log.info("Setting up standard AWS credentials chain");
        return SsmClient.builder()
                .region(Region.of(region))
                .credentialsProvider(ProfileCredentialsProvider.builder().profileName(profileName).build())
                .build();
    }

    /**
     * Custom credentials provider that automatically renews tokens when they expire
     */
    public static class AutoRenewingCredentialsProvider implements AwsCredentialsProvider {
        private static final Logger log = LoggerFactory.getLogger(AutoRenewingCredentialsProvider.class);
        private final String profileName;
        private final String tokenScriptPath;
        private ProfileCredentialsProvider delegate;

        public AutoRenewingCredentialsProvider(String profileName, String tokenScriptPath) {
            this.profileName = profileName;
            this.tokenScriptPath = tokenScriptPath;
            this.delegate = ProfileCredentialsProvider.builder()
                    .profileName(profileName)
                    .build();
        }

        @Override
        public AwsCredentials resolveCredentials() {
            try {
                return delegate.resolveCredentials();
            } catch (Exception e) {
                log.warn("Failed to get credentials, attempting to renew token", e);
                boolean renewed = renewToken();
                if (renewed) {
                    // Refresh the delegate to pick up new credentials
                    delegate = ProfileCredentialsProvider.builder()
                            .profileName(profileName)
                            .build();
                    return delegate.resolveCredentials();
                }
                throw e;
            }
        }

        /**
         * Checks if token is valid and renews if needed
         */
        public void checkAndRenewTokenIfNeeded() {
            try {
                // Try to use current credentials
                StsClient stsClient = StsClient.builder()
                        .region(Region.EU_WEST_1)
                        .credentialsProvider(delegate)
                        .build();

                // Test if credentials are valid
                stsClient.getCallerIdentity(GetCallerIdentityRequest.builder().build());
                log.debug("AWS credentials are still valid");
            } catch (Exception e) {
                log.info("AWS credentials appear to be expired, attempting to renew token");
                renewToken();
            }
        }

        /**
         * Executes the Python token renewal script
         * @return true if renewal was successful
         */
        private boolean renewToken() {
            try {
                log.info("Executing token renewal script: {}", tokenScriptPath);

                // Build the command to execute the Python script
                ProcessBuilder processBuilder = new ProcessBuilder("python", tokenScriptPath);
                processBuilder.redirectErrorStream(true);

                Process process = processBuilder.start();

                // Log the output from the script
                try (BufferedReader reader = new BufferedReader(
                        new InputStreamReader(process.getInputStream()))) {
                    String line;
                    while ((line = reader.readLine()) != null) {
                        log.debug("Token script: {}", line);
                    }
                }

                int exitCode = process.waitFor();
                if (exitCode == 0) {
                    log.info("Token renewal completed successfully");
                    return true;
                } else {
                    log.error("Token renewal failed with exit code: {}", exitCode);
                    return false;
                }
            } catch (IOException | InterruptedException e) {
                log.error("Failed to execute token renewal script", e);
                return false;
            }
        }
    }
}


package com.lseg.ipps.solutions.shared.service;


import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lseg.ipps.solutions.shared.model.CacheEntry;
import com.lseg.ipps.solutions.shared.response.ConfigurationParameter;
import com.lseg.ipps.solutions.shared.service.cache.CacheEntryManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import software.amazon.awssdk.auth.credentials.ProfileCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.ssm.SsmClient;
import software.amazon.awssdk.services.ssm.model.GetParametersByPathRequest;
import software.amazon.awssdk.services.ssm.model.GetParametersByPathResponse;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class ConfigurationService {

    private final Logger logger = LoggerFactory.getLogger(ConfigurationService.class);

    public static final String LOGGING_LEVELS = "packageLogLevels";

    public static final String LOG_CONFIG_HAS_BEEN_UPDATED_SUCCESSFULLY = "Log config has been updated successfully";

    public static final String LOG_CONFIG_HAS_BEEN_UPDATED_FAILED = "Log config update failed.";

    private final CacheEntryManager cacheEntryManager;

    private final SsmClient ssmClient;

    public ConfigurationService(CacheEntryManager cacheEntryManager, SsmClient ssmClient) {
        this.cacheEntryManager = cacheEntryManager;
        this.ssmClient = ssmClient;
    }

    /**
     * @return @{@link ResponseEntity}
     */
    public String fetchAndPersistUpdatedLogLevel() {

        List<ConfigurationParameter> parameterValues = new ArrayList<>();
        String nextToken = null;
            do {
                GetParametersByPathRequest request = GetParametersByPathRequest.builder()
                        .path("/log-config").recursive(true)
                        .withDecryption(true).nextToken(nextToken).maxResults(10).build();

                GetParametersByPathResponse getParametersByPathResult = ssmClient.getParametersByPath(request);
                //GetParametersByPathResponse response = ssmClient.getParametersByPath(getParametersByPathRequest);
                ObjectMapper objectMapper = new ObjectMapper();
                List<ConfigurationParameter> configurationParameterList = getParametersByPathResult.parameters()
                        .stream()
                        .map(parameter -> {
                            try {
                                return objectMapper.readValue(parameter.value(), ConfigurationParameter.class);
                            } catch (JsonProcessingException e) {
                                throw new RuntimeException(e);
                            }
                        }).toList();
                parameterValues.addAll(configurationParameterList);
                nextToken = getParametersByPathResult.nextToken();
            } while (nextToken != null);
            persistDataInMemory(parameterValues);
        return LOG_CONFIG_HAS_BEEN_UPDATED_SUCCESSFULLY;
    }

    private void persistDataInMemory(List<ConfigurationParameter> parameterList) {
        cacheEntryManager.deleteAllEntries();// deleting entries if they present in the cache
        parameterList = parameterList.stream()
                .filter(configurationParameterResponse -> isParameterExpired(configurationParameterResponse.expiryTimestamp()))
                .collect(Collectors.toList());
        Map<String, ConfigurationParameter> data = new HashMap<>();
        parameterList
                .forEach(configurationParameterResponse -> data.put(configurationParameterResponse.packageName(), configurationParameterResponse));
        CacheEntry entry = new CacheEntry(LOGGING_LEVELS, data);
        cacheEntryManager.saveEntry(entry);
    }

    public boolean isParameterExpired(String expiryTimestamp) {
        try {
            long expiryTimeInSeconds = Long.parseLong(expiryTimestamp);
            LocalDateTime expiryDateTime = LocalDateTime.ofInstant(
                    Instant.ofEpochSecond(expiryTimeInSeconds),
                    ZoneId.of("UTC")
            );
            LocalDateTime currentDateTime = LocalDateTime.now().atZone(ZoneId.of("UTC")).toLocalDateTime();
            return currentDateTime.isAfter(expiryDateTime);

        } catch (Exception e) {
            throw new IllegalArgumentException("Invalid expiry timestamp format: " + expiryTimestamp, e);
        }
    }

}
import boto3
import requests
from lxml import etree
from botocore.exceptions import NoCredentialsError
import configparser
import ssl
import certifi
from botocore.config import Config
import pathlib
import os
from pathlib import Path

# Define the desired content
profile_content = """[profile saml]
region = eu-west-1
output = json
"""
IDP_ENTRY_URL = "https://sts.lseg.com/adfs/ls/idpinitiatedsignon.aspx?loginToRp=urn:amazon:webservices"
USERNAME = "atulkumar.katiyar@lseg.com"
PASSWORD = "Ashu@1888"
AWS_ROLE = "arn:aws:iam::729500479720:role/lseg-ipps-dev-fulladmin-adfs-role"
AWS_PROFILE_NAME = "saml"
SAML_PROVIDER="arn:aws:iam::729500479720:saml-provider/STS.LSEG.COM"

# Define the path to the config file
config_path = Path.home() / '.aws' / 'config'

# Ensure the directory exists
config_path.parent.mkdir(parents=True, exist_ok=True)

# Check if the file exists and if it already contains the desired content
if not config_path.exists() or profile_content not in config_path.read_text():
    with config_path.open('a') as config_file:
        # Add the content to the file
        config_file.write(profile_content)
    print(f"Content added to {config_path}")
else:
    print(f"The file already exists with the desired content at {config_path}")


#ssl._create_default_https_context = ssl._create_unverified_context


# Replace these with your details


# Step 1: Authenticate with the IdP
session = requests.Session()

# POST request to the IdP to authenticate
response = session.post(IDP_ENTRY_URL, data={
    'username': USERNAME,
    'password': PASSWORD
})

# Step 2: Parse the SAML assertion
tree = etree.fromstring(response.content)
saml_assertion = tree.xpath("//input[@name='SAMLResponse']/@value")[0]

# Step 3: Assume the role with SAML
ssl_context = ssl.create_default_context(cafile=certifi.where())

# Apply the SSL context when making HTTP requests
boto3_session = boto3.Session()

client = boto3_session.client(
    'sts',
    verify=False  # Use certifi's certificate bundle
)

try:
    response = client.assume_role_with_saml(
        RoleArn=AWS_ROLE,
        PrincipalArn=SAML_PROVIDER,
        SAMLAssertion=saml_assertion,
        DurationSeconds=3600  # Set the session duration as needed
    )

    credentials = response['Credentials']

    # Step 4: Store the credentials in an AWS profile
    config = configparser.ConfigParser()

    # Load existing profiles
    config.read(f"{pathlib.Path.home()}/.aws/credentials")

    config[AWS_PROFILE_NAME] = {
        'aws_access_key_id': credentials['AccessKeyId'],
        'aws_secret_access_key': credentials['SecretAccessKey'],
        'aws_session_token': credentials['SessionToken']
    }

    # Write the updated profile back to the credentials file
    with open(f"{pathlib.Path.home()}/.aws/credentials", 'w') as configfile:
        config.write(configfile)

    print(f"AWS profile '{AWS_PROFILE_NAME}' created successfully!")

except NoCredentialsError:
    print("Credentials could not be found or are invalid.")
except Exception as e:
    print(f"An error occurred: {e}")
